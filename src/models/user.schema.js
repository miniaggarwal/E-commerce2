import mongoose, { mongo } from "mongoose";
import AuthRoles from "../utils/authRoles.js";
import bcrypt from "bcryptjs";
import JWT from "jsonwebtoken";
import config from "../config/index.js";
import crypto from "crypto";

const userSchema = mongoose.Schema({
    name : {
        type : String,
        required : [true, "Must ente r Name"],
        maxLength : [50, "Name must be 50 than 50 characters"]
    },
    email :{
        type : String,
        required : [true, "Must enter Email"],
    },
    password : {
        type : String,
        required : [true, "Must enter Password"],
        minLength : [8, "Min length 8"],
        select : false  
    },
    role : {
        type : String,
        enum : Object.values(AuthRoles),
        default : AuthRoles.USER
    },
    forgotPasswordToken : String,
    forgotPasswordExpiry : Date,
},
{
    timestamps : true
})


//Encrypting password before saving : HOOKS

userSchema.pre("save", async function(next){
    if(!this.isModified("password")){
        return next();
    }

    this.password = await bcrypt.hash(this.password , 10)
    next();

})

userSchema.methods = {
    //compare password
    comparePassword : async function(enteredPassword){
        return await bcrypt.compare(enteredPassword, this.password)
    },
    //Generating JWT Token
    getJWTtoken : async function(){
        JWT.sign({_id : this._id}, config.JWT_SECRET, {
            expiresIn : config.JWT_EXPIRY})
    },
    //Generate Forgot password token
    generateForgotPasswordToken : function(){
        const forgotToken = crypto.randomBytes(20).toString("hex");
        //encryting token generated by crypto
        this.forgotPasswordToken = crypto.createHash("sha256")
        .update(forgotToken).digest("hex")
        //time for token to expire
        this.forgotPasswordExpiry = Date.now() + 20*60*1000

        return forgotToken;

    },

}




export default mongoose.model("User", userSchema)